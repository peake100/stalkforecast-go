syntax = "proto3";

package proto;

import "proto/google/api/annotations.proto";

option go_package = "github.com/peake100/stalkforecast-go/proto";

// Enum of the price patterns that can occur in animal crossing.
enum PricePatterns {
    FLUCTUATING = 0;
    BIGSPIKE = 1;
    DECREASING = 2;
    SMALLSPIKE = 3 ;
    UNKNOWN = 4;
}

// Island price data sent when requesting a prediction
message Ticker {
  // The purchase price of the turnips on sunday.
  int32 purchase_price = 1;

  // The pattern of the previous week's prices for this island.
  PricePatterns previous_pattern = 2;

  // The known nook prices for bells. This is expected to be a 12-value array with
  // a price of '0' standing in for "unknown". If this field contains less than
  // 12 values, it is assumed the remaining values are 0. The server will reject a
  // ticker with less than 12 values
  repeated int32 prices = 3;
}

// Price info for a single price period.
message PricePeriod {
  // The minimum price that might occur during this period.
  int32 min = 1;
  // The maximum price that might occur during this period.
  int32 max = 2;
  bool is_spike = 3;
}

// Price info for a series of prices.
message PricesSummary {
  // The minimum guaranteed price for the parent. This is the highest minimum price
  // we can say will happen with 100% certainty.
  int32 min = 1;
  // The potential maximum price of the parent object.
  int32 max = 2;
  // The price periods during which ``min`` might occur.
  repeated int32 min_periods = 3;
  // The price periods during which ``max`` might occur.
  repeated int32 max_periods = 4;
}

// Spike info for weeks, weeks and patterns.
message SpikeRange {
  // Whether the parent has this type of spike.
  bool has = 1;
  // The price period (0-11) the spike starts on.
  int32 start = 2;
  // The price period (0-11) the spike ends on.
  int32 end = 3;
}

// Describes a potential price fluctuation for a week of a given price pattern.
message PotentialWeek {
  // The chance this price fluctuation will occur.
  double chance = 1;
  // Price information for each price period. Will always have 12 items.
  repeated PricePeriod prices = 3;
  // A summary of the prices in this fluctuation.
  PricesSummary prices_summary = 4;
  // A summary of whether there will be a spike and what periods it will occur on.
  SpikeRange spike = 5;
}

// Describes the potential course a price pattern may take given the user's price
// ticker.
message PotentialPattern {
  PricePatterns pattern = 1;
  double chance = 2;
  PricesSummary prices_summary = 3;
  SpikeRange spike = 4;
  repeated PotentialWeek potential_weeks = 5;
}

// Spike info for the overall prediction.
message SpikeChances {
  // Whether the parent has this type of spike.
  bool has = 1;
  // The price period (0-11) the spike might start on.
  int32 start = 2;
  // The price period (0-11) the spike might end on.
  int32 end = 3;
  // The overall chance this type of spike will occur
  double chance = 4;
  // A period-by-period breakdown of the chances this type of spike will occur on the
  // given price period.
  repeated double breakdown = 5;
}

// Contains the overall chances of a price spike occurring this week, as well as a
// breakdown of likelihood for each price period, by spike type.
message ForecastSpikes {
  // The chances of a small spike happening this week.
  SpikeChances small = 1;
  // The chances of a big spike happening this week.
  SpikeChances big = 2;
  // The chances of any spike happening this week.
  SpikeChances any = 3;
}

// A forecast for prices on your island
message Forecast {
  PricesSummary prices_summary = 1;
  ForecastSpikes spikes = 2;
  repeated PotentialPattern patterns = 3;
}


// The forecasting service definition.
service StalkForecaster {
  // Returns a turnip price forecast for supplied price ticker.
  rpc ForecastPrices (Ticker) returns (Forecast) {
    option (google.api.http) = {
      post: "/forecast"
      body: "*"
    };
  }
}
